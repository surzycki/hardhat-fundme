{
  "address": "0xaE55FE5ed9B4DD87c03830aAF1966F462725c46b",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xdf1ba8ff227adcd71460d09e688b4661f5ddfcfbc6eeacd83ca0d9f7ef4a9238",
  "receipt": {
    "to": null,
    "from": "0x12418dFa751a042f076f0b78939fbBc3BC6a4Ea9",
    "contractAddress": "0xaE55FE5ed9B4DD87c03830aAF1966F462725c46b",
    "transactionIndex": 60,
    "gasUsed": "1013732",
    "logsBloom": "0x
    "blockHash": "0x39688e97786bd95d8209ea719fa23a65bd0e979fc5b350264e84e35f395145d2",
    "transactionHash": "0xdf1ba8ff227adcd71460d09e688b4661f5ddfcfbc6eeacd83ca0d9f7ef4a9238",
    "logs": [],
    "blockNumber": 7628597,
    "cumulativeGasUsed": "20241653",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e"
  ],
  "numDeployments": 2,
  "solcInputHash": "a5e03496f45f3ff64e2debfac3f4ce59",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Stefan Surzycki\",\"details\":\"This implements price feeds as our library\",\"kind\":\"dev\",\"methods\":{\"fund()\":{\"details\":\"This implements price feeds\"}},\"title\":\"A contract for crowd funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"This function funds this contract\"}},\"notice\":\"This contract is to demo a sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"./PriceConverter.sol\\\";\\n\\nerror FundMe__NotOwner();\\n\\n// NATSPEC\\n/** @title A contract for crowd funding\\n    @author Stefan Surzycki\\n    @notice This contract is to demo a sample funding contract\\n    @dev This implements price feeds as our library\\n*/\\ncontract FundMe {\\n    using PriceConverter for uint256;\\n\\n    // constant more gas efficient\\n    uint256 public constant MINIMUM_USD = 50 * 1e18;\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n    address[] private s_funders;\\n\\n    address private immutable i_owner;\\n\\n    AggregatorV3Interface private s_priceFeed;\\n\\n    modifier onlyOwner() {\\n        if (msg.sender != i_owner) {\\n            revert FundMe__NotOwner();\\n        }\\n        _;\\n    }\\n\\n    constructor(address priceFeedAddress) {\\n        i_owner = msg.sender;\\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    // receive() external payable {\\n    //     fund();\\n    // }\\n\\n    // fallback() external payable {\\n    //     fund();\\n    // }\\n\\n    /** @notice This function funds this contract\\n        @dev This implements price feeds\\n       */\\n    function fund() public payable {\\n        // require is expensive\\n        require(\\n            msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\\n            \\\"Did not send enough\\\"\\n        );\\n        s_funders.push(msg.sender);\\n        s_addressToAmountFunded[msg.sender] = msg.value;\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < s_funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n\\n        s_funders = new address[](0);\\n        // transfer\\n        // payable(msg.sender).transfer(address(this).balance);\\n\\n        // send\\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n        // require(sendSuccess, \\\"Send Failed\\\");\\n\\n        // call, recommended way of doing this\\n        (bool callSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        // require is expensive\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n\\n    function cheaperWithdraw() public payable onlyOwner {\\n        // read array into memory then do stuff to save gas\\n        address[] memory funders = s_funders;\\n        // mappings can't be in memory :(\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n\\n        s_funders = new address[](0);\\n\\n        (bool callSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        // expensice require\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getFunder(uint256 index) public view returns (address) {\\n        return s_funders[index];\\n    }\\n\\n    function getAddressToAmountFunded(address funder)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return s_addressToAmountFunded[funder];\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n}\\n\",\"keccak256\":\"0x4ae67344d8623b6a58366df077ae482bf539677d9a4abf3fc61cd1270df18082\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConverter {\\n    function getPrice(AggregatorV3Interface priceFeed)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\n        return uint256(price * 1e10);\\n    }\\n\\n    function getVersion() internal view returns (uint256) {\\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(\\n            0x8A753747A1Fa494EC906cE90E9f37563A8AF630e\\n        );\\n        return priceFeed.version();\\n    }\\n\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0xf2ffb95d6698acc6bfd78b4a296ccd723fd9622a54257d4ebbbf19623c92bf0c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200127838038062001278833981810160405281019062000037919062000120565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000152565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e882620000bb565b9050919050565b620000fa81620000db565b81146200010657600080fd5b50565b6000815190506200011a81620000ef565b92915050565b600060208284031215620001395762000138620000b6565b5b6000620001498482850162000109565b91505092915050565b60805160601c6110f96200017f600039600081816101f00152818161043f01526105b701526110f96000f3fe60806040526004361061007b5760003560e01c80639e87a5cd1161004e5780639e87a5cd1461012a578063b60d428814610155578063be2693f01461015f578063d7b4750c146101695761007b565b80630343fb25146100805780633ccfd60b146100bd5780636b69a592146100d4578063893d20e8146100ff575b600080fd5b34801561008c57600080fd5b506100a760048036038101906100a29190610a87565b6101a6565b6040516100b49190610acd565b60405180910390f35b3480156100c957600080fd5b506100d26101ee565b005b3480156100e057600080fd5b506100e961042e565b6040516100f69190610acd565b60405180910390f35b34801561010b57600080fd5b5061011461043b565b6040516101219190610af7565b60405180910390f35b34801561013657600080fd5b5061013f610463565b60405161014c9190610b71565b60405180910390f35b61015d61048d565b005b6101676105b5565b005b34801561017557600080fd5b50610190600480360381019061018b9190610bb8565b610859565b60405161019d9190610af7565b60405180910390f35b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610273576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60018054905081101561031e5760006001828154811061029957610298610be5565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061031690610c43565b915050610276565b50600067ffffffffffffffff81111561033a57610339610c8c565b5b6040519080825280602002602001820160405280156103685781602001602082028036833780820191505090505b506001908051906020019061037e92919061097d565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516103a590610cec565b60006040518083038185875af1925050503d80600081146103e2576040519150601f19603f3d011682016040523d82523d6000602084013e6103e7565b606091505b505090508061042b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042290610d5e565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b18800006104cc600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108a190919063ffffffff16565b101561050d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050490610dca565b60405180910390fd5b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461063a576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018054806020026020016040519081016040528092919081815260200182805480156106be57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610674575b5050505050905060005b81518110156107485760008282815181106106e6576106e5610be5565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061074090610c43565b9150506106c8565b50600067ffffffffffffffff81111561076457610763610c8c565b5b6040519080825280602002602001820160405280156107925781602001602082028036833780820191505090505b50600190805190602001906107a892919061097d565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516107cf90610cec565b60006040518083038185875af1925050503d806000811461080c576040519150601f19603f3d011682016040523d82523d6000602084013e610811565b606091505b5050905080610855576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161084c90610d5e565b60405180910390fd5b5050565b60006001828154811061086f5761086e610be5565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806108ad836108dd565b90506000670de0b6b3a764000085836108c69190610dea565b6108d09190610e73565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561092657600080fd5b505afa15801561093a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095e9190610f31565b5050509150506402540be400816109759190610fac565b915050919050565b8280548282559060005260206000209081019282156109f6579160200282015b828111156109f55782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061099d565b5b509050610a039190610a07565b5090565b5b80821115610a20576000816000905550600101610a08565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a5482610a29565b9050919050565b610a6481610a49565b8114610a6f57600080fd5b50565b600081359050610a8181610a5b565b92915050565b600060208284031215610a9d57610a9c610a24565b5b6000610aab84828501610a72565b91505092915050565b6000819050919050565b610ac781610ab4565b82525050565b6000602082019050610ae26000830184610abe565b92915050565b610af181610a49565b82525050565b6000602082019050610b0c6000830184610ae8565b92915050565b6000819050919050565b6000610b37610b32610b2d84610a29565b610b12565b610a29565b9050919050565b6000610b4982610b1c565b9050919050565b6000610b5b82610b3e565b9050919050565b610b6b81610b50565b82525050565b6000602082019050610b866000830184610b62565b92915050565b610b9581610ab4565b8114610ba057600080fd5b50565b600081359050610bb281610b8c565b92915050565b600060208284031215610bce57610bcd610a24565b5b6000610bdc84828501610ba3565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c4e82610ab4565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610c8157610c80610c14565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610cd6600083610cbb565b9150610ce182610cc6565b600082019050919050565b6000610cf782610cc9565b9150819050919050565b600082825260208201905092915050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610d48600b83610d01565b9150610d5382610d12565b602082019050919050565b60006020820190508181036000830152610d7781610d3b565b9050919050565b7f446964206e6f742073656e6420656e6f75676800000000000000000000000000600082015250565b6000610db4601383610d01565b9150610dbf82610d7e565b602082019050919050565b60006020820190508181036000830152610de381610da7565b9050919050565b6000610df582610ab4565b9150610e0083610ab4565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610e3957610e38610c14565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610e7e82610ab4565b9150610e8983610ab4565b925082610e9957610e98610e44565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610ec381610ea4565b8114610ece57600080fd5b50565b600081519050610ee081610eba565b92915050565b6000819050919050565b610ef981610ee6565b8114610f0457600080fd5b50565b600081519050610f1681610ef0565b92915050565b600081519050610f2b81610b8c565b92915050565b600080600080600060a08688031215610f4d57610f4c610a24565b5b6000610f5b88828901610ed1565b9550506020610f6c88828901610f07565b9450506040610f7d88828901610f1c565b9350506060610f8e88828901610f1c565b9250506080610f9f88828901610ed1565b9150509295509295909350565b6000610fb782610ee6565b9150610fc283610ee6565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561100157611000610c14565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561103e5761103d610c14565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561107b5761107a610c14565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156110b8576110b7610c14565b5b82820290509291505056fea2646970667358221220428304acb42f5b7c5fa053d95d099b98b63d1128f520a0136231d647b5acd0cc64736f6c63430008080033",
  "deployedBytecode": "0x60806040526004361061007b5760003560e01c80639e87a5cd1161004e5780639e87a5cd1461012a578063b60d428814610155578063be2693f01461015f578063d7b4750c146101695761007b565b80630343fb25146100805780633ccfd60b146100bd5780636b69a592146100d4578063893d20e8146100ff575b600080fd5b34801561008c57600080fd5b506100a760048036038101906100a29190610a87565b6101a6565b6040516100b49190610acd565b60405180910390f35b3480156100c957600080fd5b506100d26101ee565b005b3480156100e057600080fd5b506100e961042e565b6040516100f69190610acd565b60405180910390f35b34801561010b57600080fd5b5061011461043b565b6040516101219190610af7565b60405180910390f35b34801561013657600080fd5b5061013f610463565b60405161014c9190610b71565b60405180910390f35b61015d61048d565b005b6101676105b5565b005b34801561017557600080fd5b50610190600480360381019061018b9190610bb8565b610859565b60405161019d9190610af7565b60405180910390f35b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610273576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60018054905081101561031e5760006001828154811061029957610298610be5565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061031690610c43565b915050610276565b50600067ffffffffffffffff81111561033a57610339610c8c565b5b6040519080825280602002602001820160405280156103685781602001602082028036833780820191505090505b506001908051906020019061037e92919061097d565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516103a590610cec565b60006040518083038185875af1925050503d80600081146103e2576040519150601f19603f3d011682016040523d82523d6000602084013e6103e7565b606091505b505090508061042b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042290610d5e565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b18800006104cc600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108a190919063ffffffff16565b101561050d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050490610dca565b60405180910390fd5b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461063a576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018054806020026020016040519081016040528092919081815260200182805480156106be57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610674575b5050505050905060005b81518110156107485760008282815181106106e6576106e5610be5565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061074090610c43565b9150506106c8565b50600067ffffffffffffffff81111561076457610763610c8c565b5b6040519080825280602002602001820160405280156107925781602001602082028036833780820191505090505b50600190805190602001906107a892919061097d565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516107cf90610cec565b60006040518083038185875af1925050503d806000811461080c576040519150601f19603f3d011682016040523d82523d6000602084013e610811565b606091505b5050905080610855576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161084c90610d5e565b60405180910390fd5b5050565b60006001828154811061086f5761086e610be5565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806108ad836108dd565b90506000670de0b6b3a764000085836108c69190610dea565b6108d09190610e73565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561092657600080fd5b505afa15801561093a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095e9190610f31565b5050509150506402540be400816109759190610fac565b915050919050565b8280548282559060005260206000209081019282156109f6579160200282015b828111156109f55782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061099d565b5b509050610a039190610a07565b5090565b5b80821115610a20576000816000905550600101610a08565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a5482610a29565b9050919050565b610a6481610a49565b8114610a6f57600080fd5b50565b600081359050610a8181610a5b565b92915050565b600060208284031215610a9d57610a9c610a24565b5b6000610aab84828501610a72565b91505092915050565b6000819050919050565b610ac781610ab4565b82525050565b6000602082019050610ae26000830184610abe565b92915050565b610af181610a49565b82525050565b6000602082019050610b0c6000830184610ae8565b92915050565b6000819050919050565b6000610b37610b32610b2d84610a29565b610b12565b610a29565b9050919050565b6000610b4982610b1c565b9050919050565b6000610b5b82610b3e565b9050919050565b610b6b81610b50565b82525050565b6000602082019050610b866000830184610b62565b92915050565b610b9581610ab4565b8114610ba057600080fd5b50565b600081359050610bb281610b8c565b92915050565b600060208284031215610bce57610bcd610a24565b5b6000610bdc84828501610ba3565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c4e82610ab4565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610c8157610c80610c14565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610cd6600083610cbb565b9150610ce182610cc6565b600082019050919050565b6000610cf782610cc9565b9150819050919050565b600082825260208201905092915050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610d48600b83610d01565b9150610d5382610d12565b602082019050919050565b60006020820190508181036000830152610d7781610d3b565b9050919050565b7f446964206e6f742073656e6420656e6f75676800000000000000000000000000600082015250565b6000610db4601383610d01565b9150610dbf82610d7e565b602082019050919050565b60006020820190508181036000830152610de381610da7565b9050919050565b6000610df582610ab4565b9150610e0083610ab4565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610e3957610e38610c14565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610e7e82610ab4565b9150610e8983610ab4565b925082610e9957610e98610e44565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610ec381610ea4565b8114610ece57600080fd5b50565b600081519050610ee081610eba565b92915050565b6000819050919050565b610ef981610ee6565b8114610f0457600080fd5b50565b600081519050610f1681610ef0565b92915050565b600081519050610f2b81610b8c565b92915050565b600080600080600060a08688031215610f4d57610f4c610a24565b5b6000610f5b88828901610ed1565b9550506020610f6c88828901610f07565b9450506040610f7d88828901610f1c565b9350506060610f8e88828901610f1c565b9250506080610f9f88828901610ed1565b9150509295509295909350565b6000610fb782610ee6565b9150610fc283610ee6565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561100157611000610c14565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561103e5761103d610c14565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561107b5761107a610c14565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156110b8576110b7610c14565b5b82820290509291505056fea2646970667358221220428304acb42f5b7c5fa053d95d099b98b63d1128f520a0136231d647b5acd0cc64736f6c63430008080033",
  "devdoc": {
    "author": "Stefan Surzycki",
    "details": "This implements price feeds as our library",
    "kind": "dev",
    "methods": {
      "fund()": {
        "details": "This implements price feeds"
      }
    },
    "title": "A contract for crowd funding",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fund()": {
        "notice": "This function funds this contract"
      }
    },
    "notice": "This contract is to demo a sample funding contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 63,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 66,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 71,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}